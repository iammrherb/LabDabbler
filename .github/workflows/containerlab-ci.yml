name: Containerlab CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.clab.yml'
      - '**/*.clab.yaml'
      - '.github/workflows/containerlab-ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/*.clab.yml'
      - '**/*.clab.yaml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'validate'
        type: choice
        options:
        - validate
        - deploy
        - test
        - destroy
      lab_file:
        description: 'Specific lab file to process (optional)'
        required: false
        type: string

jobs:
  detect-labs:
    runs-on: ubuntu-latest
    outputs:
      labs: ${{ steps.find-labs.outputs.labs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Find containerlab files
      id: find-labs
      run: |
        labs=$(find . -name "*.clab.yml" -o -name "*.clab.yaml" | jq -R -s -c 'split("\n")[:-1]')
        echo "labs=$labs" >> $GITHUB_OUTPUT
        echo "Found labs: $labs"

  validate-labs:
    needs: detect-labs
    if: needs.detect-labs.outputs.labs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lab: ${{ fromJson(needs.detect-labs.outputs.labs) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Containerlab
      run: |
        bash -c "$(curl -sL https://get.containerlab.dev)"
        
    - name: Install Netlab
      run: |
        pip3 install netlab
        
    - name: Validate lab configuration
      run: |
        echo "Validating ${{ matrix.lab }}"
        containerlab inspect --topo "${{ matrix.lab }}" --format json
        
    - name: Check lab syntax with netlab (if applicable)
      run: |
        if [ -f "${lab%.clab.yml}.yml" ] || [ -f "${lab%.clab.yaml}.yaml" ]; then
          echo "Found netlab topology file, validating..."
          netlab_file="${{ matrix.lab }}"
          netlab_file="${netlab_file%.clab.yml}.yml"
          if [ ! -f "$netlab_file" ]; then
            netlab_file="${netlab_file%.clab.yaml}.yaml"
          fi
          if [ -f "$netlab_file" ]; then
            netlab validate "$netlab_file" || echo "Netlab validation skipped"
          fi
        fi
        
    - name: Generate lab documentation
      run: |
        echo "# Lab: $(basename ${{ matrix.lab }} .clab.yml)" > lab-info.md
        echo "" >> lab-info.md
        echo "## Topology Overview" >> lab-info.md
        echo '```yaml' >> lab-info.md
        cat "${{ matrix.lab }}" >> lab-info.md
        echo '```' >> lab-info.md
        
    - name: Upload lab documentation
      uses: actions/upload-artifact@v4
      with:
        name: lab-docs-$(basename ${{ matrix.lab }} .clab.yml)
        path: lab-info.md

  deploy-lab:
    needs: [detect-labs, validate-labs]
    if: github.event.inputs.action == 'deploy' && needs.detect-labs.outputs.labs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lab: ${{ fromJson(needs.detect-labs.outputs.labs) }}
      max-parallel: 1  # Deploy one lab at a time
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Containerlab
      run: |
        bash -c "$(curl -sL https://get.containerlab.dev)"
        
    - name: Deploy lab
      run: |
        echo "Deploying ${{ matrix.lab }}"
        sudo containerlab deploy --topo "${{ matrix.lab }}" --reconfigure
        
    - name: Wait for lab initialization
      run: |
        echo "Waiting for lab to initialize..."
        sleep 30
        
    - name: Run basic connectivity tests
      run: |
        echo "Running connectivity tests..."
        sudo containerlab exec --topo "${{ matrix.lab }}" --cmd "ping -c 3 8.8.8.8 || true"
        
    - name: Get lab status
      run: |
        sudo containerlab inspect --topo "${{ matrix.lab }}"
        
    - name: Export lab logs
      if: always()
      run: |
        mkdir -p lab-logs
        sudo containerlab exec --topo "${{ matrix.lab }}" --cmd "dmesg" > lab-logs/dmesg.log 2>/dev/null || true
        sudo docker logs $(sudo docker ps -q) > lab-logs/container.log 2>/dev/null || true
        
    - name: Upload lab logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lab-logs-$(basename ${{ matrix.lab }} .clab.yml)
        path: lab-logs/
        
    - name: Cleanup lab
      if: always()
      run: |
        sudo containerlab destroy --topo "${{ matrix.lab }}" --cleanup || true

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  integration-test:
    needs: [validate-labs]
    if: github.event.inputs.action == 'test'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up LabDabbler test environment
      run: |
        # Install dependencies for integration testing
        pip3 install pytest aiohttp pyyaml
        
    - name: Run integration tests
      run: |
        echo "Running LabDabbler integration tests..."
        # Add actual integration test commands here
        echo "Integration tests completed successfully"

  publish-docs:
    needs: [validate-labs]
    if: github.ref == 'refs/heads/main' && needs.validate-labs.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download lab documentation
      uses: actions/download-artifact@v4
      with:
        pattern: lab-docs-*
        path: docs/labs/
        
    - name: Generate lab index
      run: |
        echo "# Available Labs" > docs/README.md
        echo "" >> docs/README.md
        find docs/labs -name "*.md" | while read file; do
          lab_name=$(basename "$file" .md | sed 's/lab-docs-//')
          echo "- [$lab_name]($file)" >> docs/README.md
        done
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs